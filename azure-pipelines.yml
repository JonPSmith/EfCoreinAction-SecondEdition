# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9ec5184a-6751-43a1-bfe9-f2c15982b003'
  imageRepository: 'bookapprepaso'
  containerRegistry: 'repasowebappacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/BookApp/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'windows-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build DotNet
      inputs:
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/Test/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true --settings **/coverlet.runsettings' 
        testRunTitle: EFCore2.Tests

#    - task: DotNetCoreCLI@2
#      displayName: 'Publish functional tests'
#      inputs:
#        command: publish
#        publishWebProjects: false
#        projects: '**/*FunctionalTests*.csproj'
#        arguments: '--configuration $(BuildConfiguration) --output "$(build.artifactstagingdirectory)/FunctionalTests"'
#        zipAfterPublish: false
#        modifyOutputPath: false     
#    - task: CopyFiles@2
#      displayName: 'Copy runsettings file'
#      inputs:
#        Contents: '**/*.runsettings'
#        TargetFolder: '$(build.artifactstagingdirectory)/FunctionalTests'
#        flattenFolders: true
    - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.6.4'  
      displayName: 'Install ReportGenerator tool'  
    - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
      displayName: 'Create reports'
    - task: PublishCodeCoverageResults@1  
      displayName: 'Publish code coverage'  
      inputs:  
        codeCoverageTool: Cobertura  
        summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'        
- stage: Publish
  displayName: Publish and push stage
  jobs:  
  - job: Publish
    displayName: Publish
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Publish webapp'
      inputs:
        command: publish
        arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)/PublishedWebApp'
        zipAfterPublish: false   
        buildProperties: 
    - script: ls    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)/PublishedWebApp'
        tags: '$(tag)'

- stage: qa_deploy
  jobs:
  - deployment: qa_deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'qa-hello'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@3
            displayName: 'Deploy Azure App Service'
            inputs:
              azureSubscription: 'repasowebapp - Azure'
              appType: 'applinux'
              WebAppName: 'repasowebapp'
              DeployToSlotFlag: true
              ResourceGroupName: 'RG_repasowebapp'
              SlotName: 'qa'
              DockerNamespace: '$(containerRegistry)'
              DockerRepository: '$(imageRepository)'
              DockerImageTag: '$(tag)'
              WebAppUri: 'webAppUrl'

- stage: prod_deploy
  jobs:
  - deployment: prod_deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'prod-hello'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@3
            displayName: 'Deploy Azure App Service'
            inputs:
              azureSubscription: 'repasowebapp - Azure'
              appType: 'applinux'
              WebAppName: 'repasowebapp'
              DeployToSlotFlag: true
              ResourceGroupName: 'RG_repasowebapp'
              DockerNamespace: '$(containerRegistry)'
              DockerRepository: '$(imageRepository)'
              DockerImageTag: '$(tag)'
              WebAppUri: 'webAppUrl'